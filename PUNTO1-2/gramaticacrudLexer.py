# Generated from gramaticacrud.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,189,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,
        7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
        1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,21,1,21,5,21,153,8,21,10,21,12,21,156,9,21,1,22,4,22,159,
        8,22,11,22,12,22,160,1,23,1,23,5,23,165,8,23,10,23,12,23,168,9,23,
        1,23,1,23,1,24,4,24,173,8,24,11,24,12,24,174,1,24,1,24,1,25,1,25,
        1,25,1,25,5,25,183,8,25,10,25,12,25,186,9,25,1,25,1,25,0,0,26,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        1,0,48,57,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,2,0,10,10,13,
        13,193,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,1,53,1,0,0,0,3,55,1,0,0,0,5,57,1,0,0,0,7,59,1,0,0,
        0,9,61,1,0,0,0,11,63,1,0,0,0,13,66,1,0,0,0,15,68,1,0,0,0,17,71,1,
        0,0,0,19,73,1,0,0,0,21,76,1,0,0,0,23,82,1,0,0,0,25,88,1,0,0,0,27,
        97,1,0,0,0,29,100,1,0,0,0,31,108,1,0,0,0,33,113,1,0,0,0,35,116,1,
        0,0,0,37,122,1,0,0,0,39,133,1,0,0,0,41,141,1,0,0,0,43,150,1,0,0,
        0,45,158,1,0,0,0,47,162,1,0,0,0,49,172,1,0,0,0,51,178,1,0,0,0,53,
        54,5,59,0,0,54,2,1,0,0,0,55,56,5,40,0,0,56,4,1,0,0,0,57,58,5,41,
        0,0,58,6,1,0,0,0,59,60,5,44,0,0,60,8,1,0,0,0,61,62,5,61,0,0,62,10,
        1,0,0,0,63,64,5,33,0,0,64,65,5,61,0,0,65,12,1,0,0,0,66,67,5,60,0,
        0,67,14,1,0,0,0,68,69,5,60,0,0,69,70,5,61,0,0,70,16,1,0,0,0,71,72,
        5,62,0,0,72,18,1,0,0,0,73,74,5,62,0,0,74,75,5,61,0,0,75,20,1,0,0,
        0,76,77,5,67,0,0,77,78,5,82,0,0,78,79,5,69,0,0,79,80,5,65,0,0,80,
        81,5,82,0,0,81,22,1,0,0,0,82,83,5,84,0,0,83,84,5,65,0,0,84,85,5,
        66,0,0,85,86,5,76,0,0,86,87,5,65,0,0,87,24,1,0,0,0,88,89,5,73,0,
        0,89,90,5,78,0,0,90,91,5,83,0,0,91,92,5,69,0,0,92,93,5,82,0,0,93,
        94,5,84,0,0,94,95,5,65,0,0,95,96,5,82,0,0,96,26,1,0,0,0,97,98,5,
        69,0,0,98,99,5,78,0,0,99,28,1,0,0,0,100,101,5,86,0,0,101,102,5,65,
        0,0,102,103,5,76,0,0,103,104,5,79,0,0,104,105,5,82,0,0,105,106,5,
        69,0,0,106,107,5,83,0,0,107,30,1,0,0,0,108,109,5,76,0,0,109,110,
        5,69,0,0,110,111,5,69,0,0,111,112,5,82,0,0,112,32,1,0,0,0,113,114,
        5,68,0,0,114,115,5,69,0,0,115,34,1,0,0,0,116,117,5,68,0,0,117,118,
        5,79,0,0,118,119,5,78,0,0,119,120,5,68,0,0,120,121,5,69,0,0,121,
        36,1,0,0,0,122,123,5,65,0,0,123,124,5,67,0,0,124,125,5,84,0,0,125,
        126,5,85,0,0,126,127,5,65,0,0,127,128,5,76,0,0,128,129,5,73,0,0,
        129,130,5,90,0,0,130,131,5,65,0,0,131,132,5,82,0,0,132,38,1,0,0,
        0,133,134,5,67,0,0,134,135,5,79,0,0,135,136,5,76,0,0,136,137,5,79,
        0,0,137,138,5,67,0,0,138,139,5,65,0,0,139,140,5,82,0,0,140,40,1,
        0,0,0,141,142,5,69,0,0,142,143,5,76,0,0,143,144,5,73,0,0,144,145,
        5,77,0,0,145,146,5,73,0,0,146,147,5,78,0,0,147,148,5,65,0,0,148,
        149,5,82,0,0,149,42,1,0,0,0,150,154,7,0,0,0,151,153,7,1,0,0,152,
        151,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,
        44,1,0,0,0,156,154,1,0,0,0,157,159,7,2,0,0,158,157,1,0,0,0,159,160,
        1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,46,1,0,0,0,162,166,5,
        34,0,0,163,165,8,3,0,0,164,163,1,0,0,0,165,168,1,0,0,0,166,164,1,
        0,0,0,166,167,1,0,0,0,167,169,1,0,0,0,168,166,1,0,0,0,169,170,5,
        34,0,0,170,48,1,0,0,0,171,173,7,4,0,0,172,171,1,0,0,0,173,174,1,
        0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,176,1,0,0,0,176,177,6,
        24,0,0,177,50,1,0,0,0,178,179,5,45,0,0,179,180,5,45,0,0,180,184,
        1,0,0,0,181,183,8,5,0,0,182,181,1,0,0,0,183,186,1,0,0,0,184,182,
        1,0,0,0,184,185,1,0,0,0,185,187,1,0,0,0,186,184,1,0,0,0,187,188,
        6,25,0,0,188,52,1,0,0,0,6,0,154,160,166,174,184,1,6,0,0
    ]

class gramaticacrudLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    CREAR = 11
    TABLA = 12
    INSERTAR = 13
    EN = 14
    VALORES = 15
    LEER = 16
    DE = 17
    DONDE = 18
    ACTUALIZAR = 19
    COLOCAR = 20
    ELIMINAR = 21
    IDENT = 22
    NUM = 23
    TEXTO = 24
    WS = 25
    COMENTARIO = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'('", "')'", "','", "'='", "'!='", "'<'", "'<='", "'>'", 
            "'>='", "'CREAR'", "'TABLA'", "'INSERTAR'", "'EN'", "'VALORES'", 
            "'LEER'", "'DE'", "'DONDE'", "'ACTUALIZAR'", "'COLOCAR'", "'ELIMINAR'" ]

    symbolicNames = [ "<INVALID>",
            "CREAR", "TABLA", "INSERTAR", "EN", "VALORES", "LEER", "DE", 
            "DONDE", "ACTUALIZAR", "COLOCAR", "ELIMINAR", "IDENT", "NUM", 
            "TEXTO", "WS", "COMENTARIO" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "CREAR", "TABLA", "INSERTAR", 
                  "EN", "VALORES", "LEER", "DE", "DONDE", "ACTUALIZAR", 
                  "COLOCAR", "ELIMINAR", "IDENT", "NUM", "TEXTO", "WS", 
                  "COMENTARIO" ]

    grammarFileName = "gramaticacrud.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


